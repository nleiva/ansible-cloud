- name: Provision EC2 instances
  amazon.aws.ec2_instance:
    name: "{{ ec2_name_tag }}"
    region: "{{ ec2_region }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ec2_ami_id | trim }}"
    key_name: "{{ ec2_resource_prefix }}-key"
    vpc_subnet_id: "{{ create_subnet.subnet.id }}"
    network:
      assign_public_ip: true
    security_group: "{{ ec2_resource_prefix }}-insecure-SG"
    wait: yes
    volumes: "{{ ec2_volume }}"
    tags:
      Environment: "{{ ec2_environment }}"
      Contact: "{{ ec2_contact_tag }}"
  register: ec2

- name: Keep list of all instance ids
  ansible.builtin.set_fact:
    aws_instances: "{{ aws_instances }} + [ '{{ ec2.instances[0].instance_id }}' ]"

- name: Save public IP address
  ansible.builtin.set_fact:
    pub_ip: "{{ ec2.instances[0].public_ip_address }}"
  register: got_ip
  ignore_errors: yes

- name: Try to get the IP again
  block:
  - name: Get EC2 info
    amazon.aws.ec2_instance_info:
      region: "{{ ec2_region }}"
      filters:
        "tag:Name": "{{ ec2_name_tag }}"
        "tag:Environment": "{{ ec2_environment }}"
        "tag:Contact": "{{ ec2_contact_tag }}"
        # 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped)
        instance-state-code: [ "0", "16" ]
    register: ec2

  - name: Save public IP address - second try
    ansible.builtin.set_fact:
      pub_ip: "{{ ec2.instances[0].public_ip_address }}"
  when: got_ip.failed

- name: Wait for SSH to come up
  ansible.builtin.include: try-to-ssh.yml
  with_items: "{{ ec2.instances }}"